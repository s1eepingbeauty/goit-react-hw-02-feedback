{"version":3,"sources":["components/Sections/Section.js","components/Notifiction/Notification.js","components/Statistics/FeedbackStatistics.js","components/Options/FeedbackOptions.js","data/options.js","App.js","index.js"],"names":["Section","title","children","Notification","message","FeedbackStatistics","feedbacks","total","percentage","good","neutral","bad","FeedbackOptions","options","onLeaveFeedback","map","option","feedback","type","data-feedback","onClick","FeedbackButtons","propTypes","PropTypes","arrayOf","string","func","isRequired","FEEDBACK_OPTIONS","App","state","handleFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositivePercentsge","Math","round","this","positivePercentage","Component","ReactDOM","render","document","getElementById"],"mappings":"8OAgBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCEQC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCiB3BC,EAjBY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC9C,OACE,qCACGD,EAAQ,GACP,+BACE,wCAAWD,EAAUG,QACrB,2CAAcH,EAAUI,WACxB,uCAAUJ,EAAUK,OACpB,yCAAYJ,KACZ,8CAAiBC,QAGV,IAAVD,GAAe,cAAC,EAAD,CAAcH,QAAQ,0B,gBCJtCQ,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAACC,GAAD,OATG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUH,EAAsB,EAAtBA,gBACnC,OACE,wBAAuBI,KAAK,SAASC,gBAAeF,EAAUG,QAASN,EAAvE,SACGG,GADUA,GAOgBI,CAAgB,CAAEJ,SAAUD,EAAQF,wBAGrEF,EAAgBU,UAAY,CAC1BT,QAASU,IAAUC,QAAQD,IAAUE,QACrCX,gBAAiBS,IAAUG,KAAKC,YAGnBf,QCnBFgB,EAAmB,CAAC,OAAQ,UAAW,OCiDrCC,E,4MA1CbC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,eAAiB,YAAiB,IACxBd,EADuB,EAAbe,OACUC,QAApBhB,SACR,EAAKiB,UAAS,SAACC,GAAD,sBAAmBlB,EAAWkB,EAAUlB,GAAY,O,EAGpEmB,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBrB,KADiB,EACXC,QADW,EACFC,K,EAIzB0B,wBAA0B,WAAO,IACvB5B,EAAS,EAAKqB,MAAdrB,KACFF,EAAQ,EAAK6B,qBACnB,OAAOE,KAAKC,MAAO9B,EAAOF,EAAS,MAAQ,G,4CAG7C,WACE,IAAMA,EAAQiC,KAAKJ,qBACbK,EAAqBD,KAAKH,0BAChC,OACE,gCACE,cAAC,EAAD,CAASpC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBY,QAASe,EAAkBd,gBAAiB0B,KAAKT,mBAEpE,cAAC,EAAD,CAAS9B,MAAM,aAAf,SACE,cAAC,EAAD,CACEK,UAAWkC,KAAKV,MAChBvB,MAAOA,EACPC,WAAYiC,a,GAnCNC,a,MCFlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0c854730.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import Notification from '../Notifiction/Notification';\n\nconst FeedbackStatistics = ({ feedbacks, total, percentage }) => {\n  return (\n    <>\n      {total > 0 && (\n        <ul>\n          <li>Good: {feedbacks.good}</li>\n          <li>Neutral: {feedbacks.neutral}</li>\n          <li>Bad: {feedbacks.bad}</li>\n          <li>Total: {total}</li>\n          <li>Percentage: {percentage}</li>\n        </ul>\n      )}\n      {total === 0 && <Notification message=\"No Feedback given\" />}\n    </>\n  );\n};\n\nexport default FeedbackStatistics;\n","import PropTypes from 'prop-types';\n\nconst FeedbackButtons = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button key={feedback} type=\"button\" data-feedback={feedback} onClick={onLeaveFeedback}>\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map((option) => FeedbackButtons({ feedback: option, onLeaveFeedback }));\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","export const FEEDBACK_OPTIONS = ['good', 'neutral', 'bad'];\n","import { Component } from 'react';\nimport Section from './components/Sections/Section';\nimport FeedbackStatistics from './components/Statistics/FeedbackStatistics';\nimport FeedbackOptions from './components/Options/FeedbackOptions';\nimport { FEEDBACK_OPTIONS } from './data/options';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState((prevState) => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositivePercentsge = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return Math.round((good / total) * 100) || 0;\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositivePercentsge();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={FEEDBACK_OPTIONS} onLeaveFeedback={this.handleFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          <FeedbackStatistics\n            feedbacks={this.state}\n            total={total}\n            percentage={positivePercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './app.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}